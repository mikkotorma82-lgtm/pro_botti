from __future__ import annotations
import argparse, json, yaml
from pathlib import Path
import numpy as np, pandas as pd
from joblib import load, parallel_backend

from core.cooldown import apply_cooldown, apply_flip_guard

ROOT = Path(__file__).resolve().parents[1]
DATA_DIR = ROOT / "data" / "history"
MODEL_DIR = ROOT / "models"
STATE_DIR = ROOT / "data" / "state"
STATE_DIR.mkdir(parents=True, exist_ok=True)

FEATS = ["ret1","ret5","vol5","ema12","ema26","macd","rsi14","atr14","ema_gap"]

def load_cfg(p: Path) -> dict:
    with open(p, "r") as f:
        return yaml.safe_load(f)

def make_features(df: pd.DataFrame) -> pd.DataFrame:
    z = df.copy()
    z["ret1"] = z["close"].pct_change()
    z["ret5"] = z["close"].pct_change(5)
    z["vol5"] = z["ret1"].rolling(5).std()
    z["ema12"] = z["close"].ewm(span=12, adjust=False).mean()
    z["ema26"] = z["close"].ewm(span=26, adjust=False).mean()
    z["macd"] = z["ema12"] - z["ema26"]
    d = z["close"].diff()
    up = d.clip(lower=0).ewm(alpha=1/14, adjust=False).mean()
    down = (-d.clip(upper=0)).ewm(alpha=1/14, adjust=False).mean()
    rs = up / (down + 1e-12)
    z["rsi14"] = 100 - 100/(1+rs)
    hl = z["high"] - z["low"]
    hc = (z["high"] - z["close"].shift()).abs()
    lc = (z["low"] - z["close"].shift()).abs()
    tr = pd.concat([hl, hc, lc], axis=1).max(axis=1)
    z["atr14"] = tr.rolling(14).mean()
    z["ema_gap"] = (z["close"] - z["ema12"]) / (z["ema12"] + 1e-12)
    return z.dropna()

def proba_map(clf, Xrow: np.ndarray) -> dict:
    with parallel_backend('threading', n_jobs=1):
        p = clf.predict_proba(Xrow)[0]
    classes = list(map(int, clf.classes_))
    return {int(c): float(p[i]) for i, c in enumerate(classes)}

def state_path(symbol: str, tf: str) -> Path:
    return STATE_DIR / f"cooldown_{symbol}_{tf}.json"

def latest_signal(symbol: str, tf: str, args) -> dict:
    df = pd.read_csv(DATA_DIR / f"{symbol}_{tf}.csv").sort_values("time").reset_index(drop=True)
    z = make_features(df).reset_index(drop=True)
    clf = load(MODEL_DIR / f"pro_{symbol}_{tf}.joblib")

    thr_b = args.thr_buy if args.thr_buy is not None else 0.05
    thr_s = args.thr_sell if args.thr_sell is not None else 0.05
    cd = int(args.cooldown_bars)
    fg = int(args.flip_guard_bars)

    look = min(200, len(z))
    feats = z[FEATS].values[-look:]
    sig_raw = np.zeros(look, dtype=int)
    for i in range(look):
        pm = proba_map(clf, feats[i:i+1])
        b = pm.get(1,0.0); s = pm.get(-1,0.0)
        if (b - s) >= thr_b: sig_raw[i] = 1
        elif (s - b) >= thr_s: sig_raw[i] = -1

    sig = sig_raw.copy()
    if cd>0: sig = apply_cooldown(sig, cd)
    if fg>0: sig = apply_flip_guard(sig, fg)

    now_sig = int(sig[-1])

    # pysyvÃ¤ cooldown-tila
    stp = state_path(symbol, tf)
    if cd>0:
        try:
            st = json.loads(stp.read_text()) if stp.exists() else {}
        except Exception:
            st = {}
        until = int(st.get("cooldown_until_ix", -1))
        last_ix = len(z)-1
        if last_ix < until:
            now_sig = 0
        elif now_sig != 0:
            stp.write_text(json.dumps({"cooldown_until_ix": last_ix + cd}, indent=2))

    return {
        "symbol": symbol, "tf": tf,
        "time": str(z.iloc[-1]["time"]), "price": float(z.iloc[-1]["close"]),
        "signal": now_sig,
        "proba": {"-1": pm.get(-1,0.0), "0": pm.get(0,0.0), "1": pm.get(1,0.0)} if look>0 else {},
        "features_used": FEATS, "cooldown_bars": cd, "flip_guard_bars": fg
    }

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--config", required=True)
    ap.add_argument("--symbols", nargs="+", required=True)
    ap.add_argument("--tf", required=True)
    ap.add_argument("--thr_buy", type=float, default=None)
    ap.add_argument("--thr_sell", type=float, default=None)
    ap.add_argument("--cooldown_bars", type=int, default=2)
    ap.add_argument("--flip_guard_bars", type=int, default=0)
    args = ap.parse_args()
    _ = load_cfg(Path(args.config))

    res = [latest_signal(s, args.tf, args) for s in args.symbols]
    print(json.dumps(res, indent=2))

if __name__ == "__main__":
    main()
