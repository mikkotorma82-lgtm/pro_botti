from __future__ import annotations
import argparse, json, yaml
from pathlib import Path
import numpy as np, pandas as pd
from joblib import load, parallel_backend

from core.cooldown import apply_cooldown, apply_flip_guard
from core.metrics import equity_curve, max_drawdown, hitrate, profit_factor, sharpe_ratio

ROOT = Path(__file__).resolve().parents[1]
DATA_DIR = ROOT / "data" / "history"
MODEL_DIR = ROOT / "models"
OUT_DIR = ROOT / "data" / "backtests"
OUT_DIR.mkdir(parents=True, exist_ok=True)

FEATS = ["ret1","ret5","vol5","ema12","ema26","macd","rsi14","atr14","ema_gap"]

def load_cfg(p: Path) -> dict:
    with open(p, "r") as f:
        return yaml.safe_load(f)

def make_features(df: pd.DataFrame) -> pd.DataFrame:
    z = df.copy()
    z["ret1"] = z["close"].pct_change()
    z["ret5"] = z["close"].pct_change(5)
    z["vol5"] = z["ret1"].rolling(5).std()
    z["ema12"] = z["close"].ewm(span=12, adjust=False).mean()
    z["ema26"] = z["close"].ewm(span=26, adjust=False).mean()
    z["macd"] = z["ema12"] - z["ema26"]
    d = z["close"].diff()
    up = d.clip(lower=0).ewm(alpha=1/14, adjust=False).mean()
    down = (-d.clip(upper=0)).ewm(alpha=1/14, adjust=False).mean()
    rs = up / (down + 1e-12)
    z["rsi14"] = 100 - 100/(1+rs)
    hl = z["high"] - z["low"]
    hc = (z["high"] - z["close"].shift()).abs()
    lc = (z["low"] - z["close"].shift()).abs()
    tr = pd.concat([hl, hc, lc], axis=1).max(axis=1)
    z["atr14"] = tr.rolling(14).mean()
    z["ema_gap"] = (z["close"] - z["ema12"]) / (z["ema12"] + 1e-12)
    return z

def proba_map(clf, Xrow: np.ndarray) -> dict:
    # pakota single-thread, ettei RandomForest/Joblib spawnaa prosesseja
    with parallel_backend('threading', n_jobs=1):
        p = clf.predict_proba(Xrow)[0]
    classes = list(map(int, clf.classes_))
    return {int(c): float(p[i]) for i, c in enumerate(classes)}

def simulate_one(symbol: str, tf: str, args):
    df = pd.read_csv(DATA_DIR / f"{symbol}_{tf}.csv").sort_values("time").reset_index(drop=True)
    z = make_features(df).dropna().reset_index(drop=True)
    clf = load(MODEL_DIR / f"pro_{symbol}_{tf}.joblib")

    thr_b = args.thr_buy if args.thr_buy is not None else 0.05
    thr_s = args.thr_sell if args.thr_sell is not None else 0.05
    fee_bps = float(args.fee_bps)
    fee_rt = fee_bps * 1e-4
    half_fee = 0.5 * fee_rt

    cd = int(args.cooldown_bars)
    fg = int(args.flip_guard_bars)

    sig_raw = np.zeros(len(z), dtype=int)
    feats = z[FEATS].values
    for i in range(len(z)):
        pm = proba_map(clf, feats[i:i+1])
        b = pm.get(1,0.0); s = pm.get(-1,0.0)
        if (b - s) >= thr_b: sig_raw[i] = 1
        elif (s - b) >= thr_s: sig_raw[i] = -1

    sig = sig_raw.copy()
    if cd>0: sig = apply_cooldown(sig, cd)
    if fg>0: sig = apply_flip_guard(sig, fg)

    pos = 0; entry_px = 0.0
    pnl = []
    for i in range(1, len(z)):
        px = float(z.loc[i, "close"])
        want = int(sig[i])
        tr = 0.0
        if want != 0 and want != pos:
            if pos != 0:
                edge = (px - entry_px)/entry_px if pos>0 else (entry_px - px)/entry_px
                edge -= half_fee
                tr += edge
            pos = want
            entry_px = px
            tr -= half_fee
        pnl.append(tr)

    pnl = np.asarray(pnl, float)
    eq = equity_curve(pnl, 1.0)
    total = (eq[-1]-1.0)*100.0 if eq.size else 0.0
    dd = max_drawdown(eq) if eq.size else 0.0
    hr = hitrate(pnl)
    pf = profit_factor(pnl)
    sharpe = sharpe_ratio(pnl, 252)

    outp = OUT_DIR / f"bt_{symbol}_{tf}.json"
    json.dump({
        "symbol": symbol, "tf": tf,
        "pnl_pct": total, "hit_rate_pct": hr, "max_dd_pct": dd,
        "profit_factor": pf, "sharpe": sharpe,
        "thr": [thr_b, thr_s], "fee_bps": fee_bps,
        "cooldown_bars": cd, "flip_guard_bars": fg
    }, open(outp, "w"), indent=2)

    print(f"[BT] {outp}  PnL={total:.3f}%  HR={hr:.2f}%  DD={dd:.2f}%  PF={pf:.2f}  Sharpe={sharpe:.2f}  thr=({thr_b:.2f},{thr_s:.2f})  fee={fee_bps:.2f}bps  cd={cd}")

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--config", required=True)
    ap.add_argument("--symbols", nargs="+", required=True)
    ap.add_argument("--tfs", nargs="+", required=True)
    ap.add_argument("--fee_bps", type=float, default=0.0)
    ap.add_argument("--thr_buy", type=float, default=None)
    ap.add_argument("--thr_sell", type=float, default=None)
    ap.add_argument("--cooldown_bars", type=int, default=0)
    ap.add_argument("--flip_guard_bars", type=int, default=0)
    args = ap.parse_args()
    _ = load_cfg(Path(args.config))  # pidet채채n mutta ei k채ytet채 nyt

    for s in args.symbols:
        for tf in args.tfs:
            try:
                simulate_one(s, tf, args)
            except Exception as e:
                print(f"[FAIL BT] {s} {tf}: {e}")

if __name__ == "__main__":
    main()
