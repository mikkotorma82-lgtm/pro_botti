from __future__ import annotations
import numpy as np

def equity_curve(ret_series: np.ndarray, start_equity: float = 1.0) -> np.ndarray:
    r = np.asarray(ret_series, dtype=float)
    eq = [start_equity]
    for x in r: eq.append(eq[-1]*(1.0+x))
    return np.asarray(eq[1:], float)

def max_drawdown(equity: np.ndarray) -> float:
    eq = np.asarray(equity, float)
    if eq.size == 0: return 0.0
    peaks = np.maximum.accumulate(eq)
    dd = (eq - peaks) / peaks
    return float(-dd.min()*100.0)

def hitrate(pnl_per_trade: np.ndarray) -> float:
    a = np.asarray(pnl_per_trade, float)
    if a.size == 0: return 0.0
    return float(100.0*(a>0).sum()/a.size)

def profit_factor(pnl_per_trade: np.ndarray) -> float:
    a = np.asarray(pnl_per_trade, float)
    if a.size == 0: return 0.0
    gp = a[a>0].sum(); gl = -a[a<0].sum()
    return float(np.inf) if gl==0 else float(gp/gl)

def sharpe_ratio(ret_series: np.ndarray, periods_per_year: int = 252) -> float:
    r = np.asarray(ret_series, float)
    if r.size == 0: return 0.0
    mu = r.mean()
    sd = r.std(ddof=1) if r.size>1 else 0.0
    if sd == 0: return 0.0
    return float((mu/sd)*np.sqrt(periods_per_year))
