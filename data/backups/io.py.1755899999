from __future__ import annotations
from pathlib import Path
import pandas as pd

def _read_any(p: Path):
    s = p.suffix.lower()
    if s == ".parquet":
        for eng in ("pyarrow","fastparquet"):
            try:
                return pd.read_parquet(p, engine=eng)
            except Exception:
                pass
        return pd.read_parquet(p)
    if s == ".csv" or p.name.endswith(".csv.gz"):
        return pd.read_csv(p)
    if s == ".feather" or p.name.startswith(p.stem) and ".feather" in p.name:
        return pd.read_feather(p)
PYor {symbol} {tf} under {base} or {nested}")d
(venv) root@Mikonxrpbotti:~/pro_botti# # 3) Backtest – turvallinen feats + vektorinen proba
cat > tools/backtest.py <<'PY'
from __future__ import annotations
import argparse, json, yaml
from pathlib import Path
import numpy as np, pandas as pd
from joblib import load
from core.io import load_history

# valinnaiset "suojafeats", jos metassa ei ole "feats"
DEFAULT_FEATS = ["ret1","ret5","vol5","ema12","ema26","macd","rsi14","atr14","ema_gap"]

# metrit
def equity_curve(ret_series: np.ndarray, start_equity: float = 1.0) -> np.ndarray:
    r = np.asarray(ret_series, dtype=float)
    eq = [start_equity]
    for x in r: eq.append(eq[-1]*(1.0+x))
    return np.asarray(eq[1:], float)

def max_drawdown(equity: np.ndarray) -> float: 
PY  main()_ == "__main__":AIL BT] {s} {tf}: {e
(venv) root@Mikonxrpbotti:~/pro_botti# # 4) Live-signals – sama feats-fallback + IO
cat > tools/live_signals.py <<'PY'
from __future__ import annotations
import argparse, json, yaml, time
from pathlib import Path
import numpy as np, pandas as pd
from joblib import load
from core.io import load_history

ROOT = Path(__file__).resolve().parents[1]
DATA_DIR = ROOT / "data" / "history"
MODEL_DIR = ROOT / "models"

DEFAULT_FEATS = ["ret1","ret5","vol5","ema12","ema26","macd","rsi14","atr14","ema_gap"]

def load_cfg(p: Path) -> dict:
    with open(p,"r") as f: 
        return yaml.safe_load(f)

def load_model(symbol: str, tf: str):
    clf = load(MODEL_DIR / f"pro_{symbol}_{tf}.joblib")
    feats = DEFAULT_FEATS
    meta_p = MODEL_DIR / f"pro_{symbol}_{tf}.jPY  main()_ == "__main__":indent=2)) "tf": arg
(venv) root@Mikonxrpbotti:~/pro_botti# # 5) Pikatesti: varmista että IO löytää lattanat CSV:t
echo "== Flat files =="; ls -1 data/history | head -n 5
python - <<'PY'
from pathlib import Path
from core.io import load_history
import pandas as pd
print(load_history(Path("data/history"), "US500", "1h").head(2).to_string())
print(load_history(Path("data/history"), "EURUSD", "1h").head(2).to_string())
