import pandas as pd
import numpy as np, pandas as pd

def _ema(s, span):
    return s.ewm(span=span, adjust=False).mean()

def _rsi(close, n=14):
    d = close.diff()
    up = d.clip(lower=0).rolling(n).mean()
    dn = (-d.clip(upper=0)).rolling(n).mean()
    rs = up / (dn.replace(0,np.nan))
    rsi = 100 - (100 / (1 + rs))
    return rsi.fillna(50)

def _atr(df, n=14):
    h, l, c = df["high"], df["low"], df["close"]
    prev_c = c.shift(1)
    tr = pd.concat([(h-l).abs(), (h-prev_c).abs(), (l-prev_c).abs()], axis=1).max(axis=1)
    return tr.rolling(n).mean()

def build_features(df: pd.DataFrame) -> pd.DataFrame:
    """
    Palauttaa 9-numeroista featurea, ei k채yt채 tulevaisuuden tietoa.
    Edellytt채채 kolumnit: time, open, high, low, close, volume
    """
    df = df.sort_values("time").reset_index(drop=True)
    c, v = df["close"], df["volume"]
    # perusmomentumit
    f = pd.DataFrame()
    f["ret1"] = c.pct_change(1)
    f["ret3"] = c.pct_change(3)
    f["ret6"] = c.pct_change(6)
    # vola/atr
    atr = _atr(df, 14)
    atr = _to_series(atr, prefer="atr")
f["atr14n"] = (atr.astype(float) / c.astype(float)).fillna(0)
    # trendi: EMA12/26 suhteutettuna
    ema12 = _ema(c,12); ema26=_ema(c,26)
    f["ema12n"] = (ema12/c)-1.0
    f["ema26n"] = (ema26/c)-1.0
    # BB-z
    sma20 = c.rolling(20).mean()
    std20 = c.rolling(20).std().replace(0,np.nan)
    f["boll_z"] = ((c - sma20)/std20).replace([np.inf,-np.inf],np.nan)
    # vol z
    vmean = v.rolling(20).mean()
    vstd  = v.rolling(20).std().replace(0,np.nan)
    f["vol_z"] = ((v - vmean)/vstd).replace([np.inf,-np.inf],np.nan)
    # rsi
    f["rsi14"] = _rsi(c,14)/100.0
    f = f.replace([np.inf,-np.inf], np.nan).fillna(0.0)
    return f
