import os
import math
import pandas as pd
import yfinance as yf
from datetime import timezone

OUTDIR = "data"

# Yahoo-ticker mapping
YF = {
    "EURUSD": "EURUSD=X",
    "GBPUSD": "GBPUSD=X",
    "US500": "^GSPC",
    "US100": "^NDX",
    "TSLA": "TSLA",
    "AAPL": "AAPL",
    "NVDA": "NVDA",
    "BTCUSDT": "BTC-USD",
    "ETHUSDT": "ETH-USD",
    "XRPUSDT": "XRP-USD",
    "SOLUSDT": "SOL-USD",
    "ADAUSDT": "ADA-USD",
}

# Yahoo Financen intraday-rajat:
#  - 15m: max 60d
#  - 1h (ja isommat intraday): max 730d
#  - 1d: "max"
MAX_PERIOD = {
    "15m": "60d",
    "1h": "730d",
    "4h": "730d",  # toteutetaan hakemalla 1h ja resamplataan
    "1d": "max",
}

def _to_unix_s(ts: pd.Series) -> pd.Series:
    # DatetimeIndex tai sarake -> epoch sekunteina
    if isinstance(ts, pd.DatetimeIndex):
        idx = ts
    else:
        idx = pd.to_datetime(ts)
    # poista tz -> UTC -> epoch
    if idx.tz is None:
        idx = idx.tz_localize("UTC")
    else:
        idx = idx.tz_convert("UTC")
    return (idx.view("int64") // 10**9)

def yf_download(symbol: str, interval: str, period: str) -> pd.DataFrame:
    df = yf.download(
        symbol,
        interval=interval,
        period=period,
        auto_adjust=False,
        progress=False
    )
    if df is None or df.empty:
        return pd.DataFrame(columns=["timestamp","open","high","low","close","volume"])
    df = df.rename(columns={
        "Open":"open","High":"high","Low":"low","Close":"close","Adj Close":"close","Volume":"volume"
    })
    df.index.name = "timestamp"
    df = df[["open","high","low","close","volume"]].dropna(how="all")
    return df

def fetch_tf(sym: str, tf: str):
    yf_sym = YF.get(sym, sym)
    period = MAX_PERIOD.get(tf)
    if period is None:
        print(f"[SKIP] {sym} tf={tf} ei tuettu")
        return

    if tf == "4h":
        # hae 1h -> resample 4h
        base = yf_download(yf_sym, interval="1h", period=MAX_PERIOD["1h"])
        if base.empty:
            print(f"[FAIL] {sym} 4h (1h haku tyhjÃ¤)")
            return
        agg = {
            "open":"first",
            "high":"max",
            "low":"min",
            "close":"last",
            "volume":"sum",
        }
        df = base.resample("4h").agg(agg).dropna(how="any")
    else:
        # 15m, 1h, 1d suoraan
        interval = tf if tf != "1d" else "1d"
        df = yf_download(yf_sym, interval=interval, period=period)

    if df.empty:
        print(f"[FAIL] {sym} {tf}")
        return

    # tallenna CSV timestamp sekunteina
    out = os.path.join(OUTDIR, f"{sym}_{tf}.csv")
    ts = _to_unix_s(df.index)
    out_df = pd.DataFrame({
        "timestamp": ts.astype("int64"),
        "open": df["open"].astype(float),
        "high": df["high"].astype(float),
        "low": df["low"].astype(float),
        "close": df["close"].astype(float),
        "volume": df["volume"].fillna(0).astype(float),
    })
    out_df.to_csv(out, index=False)
    print(f"[OK] wrote {out} rows={len(out_df)}")

def main():
    # Lue config.yaml -> live.symbols & timeframes
    import yaml
    cfg = {}
    if os.path.exists("config.yaml"):
        cfg = yaml.safe_load(open("config.yaml")) or {}
    live = (cfg.get("live") or {})
    symbols = list(live.get("symbols") or YF.keys())
    tfs = list(live.get("timeframes") or ["15m","1h","4h"])

    os.makedirs(OUTDIR, exist_ok=True)
    for s in symbols:
        for tf in tfs:
            try:
                fetch_tf(s, tf)
            except Exception as e:
                print(f"[FAIL] {s} {tf}: {type(e).__name__}: {e}")

if __name__ == "__main__":
    main()
